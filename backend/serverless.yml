service: connectedin-api

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1 # Singapore region
  environment:
    CHURCHES_TABLE: ${self:service}-${self:provider.stage}-churches
    MINISTRIES_TABLE: ${self:service}-${self:provider.stage}-ministries
    MISSIONARIES_TABLE: ${self:service}-${self:provider.stage}-missionaries
    USER_POOL_ID: !Ref CognitoUserPool
    USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHURCHES_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MINISTRIES_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MISSIONARIES_TABLE}"

functions:
  # Church endpoints
  listChurches:
    handler: src/handlers/churches/list.handler
    events:
      - http:
          path: /churches
          method: get
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  getChurch:
    handler: src/handlers/churches/get.handler
    events:
      - http:
          path: /churches/{id}
          method: get
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  createChurch:
    handler: src/handlers/churches/create.handler
    events:
      - http:
          path: /churches
          method: post
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  updateChurch:
    handler: src/handlers/churches/update.handler
    events:
      - http:
          path: /churches/{id}
          method: put
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  # Ministry endpoints
  listMinistries:
    handler: src/handlers/ministries/list.handler
    events:
      - http:
          path: /ministries
          method: get
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  # Missionary endpoints
  listMissionaries:
    handler: src/handlers/missionaries/list.handler
    events:
      - http:
          path: /missionaries
          method: get
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

resources:
  Resources:
    # Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

    # Cognito User Pool Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false

    # DynamoDB Tables
    ChurchesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CHURCHES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MinistriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MINISTRIES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MissionariesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MISSIONARIES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

  Outputs:
    UserPoolId:
      Value: !Ref CognitoUserPool
      Description: ID of the Cognito User Pool
    UserPoolClientId:
      Value: !Ref CognitoUserPoolClient
      Description: ID of the Cognito User Pool Client
    ApiUrl:
      Value: 
        Fn::Join:
          - ""
          - - "https://"
            - !Ref ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
      Description: URL of the API Gateway endpoint
